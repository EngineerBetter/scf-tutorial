---
resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.13
- name: helm
  type: docker-image
  source:
    repository: linkyard/concourse-helm-resource
    tag: 2.14.0
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: 1.14

resources:
- name: tfstate
  type: gcs-resource
  source:
    bucket: ((project_id))
    json_key: ((gcp_credentials_json))
    versioned_file: ci/terraform.tfstate
- name: kubeconfig
  type: gcs-resource
  source:
    bucket: ((project_id))
    json_key: ((gcp_credentials_json))
    versioned_file: ci/kube.config
- name: concourse-gcp-tf-bootstrap
  type: git
  source:
    uri: https://github.com/EngineerBetter/concourse-gcp-tf-bootstrap.git
    branch: v1.0.0
- name: scf-tutorial
  type: git
  source:
    uri: https://github.com/EngineerBetter/scf-tutorial.git
    branch: master
- name: gke-tf
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: ((project_id))
      prefix: gke
      region: ((region))
      credentials: ((gcp_credentials_json))
    env:
      GOOGLE_CLOUD_KEYFILE_JSON: ((gcp_credentials_json))
      GOOGLE_PROJECT: ((project_id))
      GOOGLE_REGION: ((region))
      GOOGLE_ZONE: ((zone))
- name: helm
  type: helm
  source:
    helm_init_server: true
    helm_init_wait: true
    tiller_service_account: helm
    tracing_enabled: true
- name: scf-release
  type: github-release
  source:
    owner: SUSE
    repository: scf
- name: kubernetes
  type: kubernetes

jobs:
- name: setup-project
  serial: true
  plan:
  - get: concourse-gcp-tf-bootstrap
  - get: scf-tutorial
    trigger: true
  - task: bootstrap-terraform
    file: concourse-gcp-tf-bootstrap/tasks/bootstrap.yml
    input_mapping:
      gcp-bootstrap: concourse-gcp-tf-bootstrap
    params: &project-ops-params
      BILLING_ACCOUNT_ID: ((billing_account_id))
      BUCKET_LOCATION: ((region))
      FOLDER_NAME: ((folder_name))
      GCP_CREDENTIALS_JSON: ((gcp_credentials_json))
      ORGANIZATION_ID: ((organization_id))
      PROJECT_ID: ((project_id))
      PROJECT_NAME: ((project_name))
  - put: tfstate
    params:
      file: tfstate-out/terraform.tfstate

- name: teardown-project
  serial: true
  plan:
  - get: concourse-gcp-tf-bootstrap
    passed: [setup-project]
  - get: tfstate
    passed: [setup-project]
  - task: bootstrap-terraform
    file: concourse-gcp-tf-bootstrap/tasks/teardown.yml
    input_mapping:
      gcp-bootstrap: concourse-gcp-tf-bootstrap
    params: *project-ops-params

- name: deploy-gke
  serial: true
  plan:
  - get: scf-tutorial
    trigger: true
    passed: [setup-project]
  - put: gke-tf
    params:
      terraform_source: scf-tutorial/ci/tf/gke
      env_name: default

- name: teardown-gke
  serial: true
  plan:
  - get: scf-tutorial
    passed: [deploy-gke]
  - get: gke-tf
    passed: [deploy-gke]
  - put: gke-tf
    params:
      action: destroy
      terraform_source: scf-tutorial/ci/tf/gke
      env_name: default
    get_params:
      action: destroy

- name: extract-kubeconfig
  serial: true
  plan:
  - get: scf-tutorial
    passed: [deploy-gke]
    trigger: true
  - get: gke-tf
    trigger: true
    passed: [deploy-gke]
  - task: extract-kubeconfig
    file: scf-tutorial/ci/tasks/tf-metadata-to-file.yml
    input_mapping:
      terraform: gke-tf
    params:
      METADATA_KEY: kubeconfig_content
      OUTPUT_FILE: kube.config
  - task: test-kubeconfig
    config:
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
          tag: latest
      inputs:
      - name: tf-metadata-to-file
      platform: linux
      run:
        path: bash
        args:
        - -exc
        - |
          kubectl cluster-info --kubeconfig tf-metadata-to-file/kube.config
  - put: kubeconfig
    params:
      file: tf-metadata-to-file/kube.config


- name: deploy-scf
  serial: true
  plan:
  - get: scf-tutorial
    passed: [extract-kubeconfig]
    trigger: true
  - get: kubeconfig
    passed: [extract-kubeconfig]
    trigger: true
  - put: kubernetes
    params:
      kubectl: apply -f scf-tutorial/k8s/tiller-service-account.yaml
      kubeconfig_file: kubeconfig/kube.config
  - get: scf-release
  - task: unzip-scf-release
    config:
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
          tag: latest
      inputs:
      - name: scf-release
      outputs:
      - name: scf-release-unzipped
      platform: linux
      run:
        path: bash
        args:
        - -exc
        - |
          unzip scf-release/scf*.zip -d scf-release-unzipped
  - task: extract-uaa-ip
    file: scf-tutorial/ci/tasks/tf-metadata-to-file.yml
    input_mapping:
      terraform: gke-tf
    params:
      METADATA_KEY: uaa_ip
      OUTPUT_FILE: ip
  - put: helm
    params:
      chart: scf-tutorial/scf/helm/uaa/
      release: uaa
      namespace: uaa
      values: scf-tutorial/scf/scf-config-values.yaml
      override_values:
      - key: kube.storage_class.persistent
        value: standard
      - key: services.loadbalanced
        value: true
      - key: services.uaa_load_balancer_ip
        path: tf-metadata-to-file/uaa_ip
      wait_until_ready: 480
      kubeconfig_path: kubeconfig/kube.config
  - task: write-ca-cert
    config:
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
          tag: latest
      inputs:
      - name: scf-release-unzipped
      - name: kubeconfig
      outputs:
      - name: ca_cert
      platform: linux
      run:
        path: bash
        args:
        - -exc
        - |
          export KUBECONFIG=kubeconfig/kube.config
          kubectl cluster-info
          kubectl get pods --namespace uaa -o jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}'
          SECRET=$(kubectl get pods --namespace uaa -o jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')
          kubectl get secret $SECRET --namespace uaa -o jsonpath="{.data['internal-ca-cert']}" | base64 --decode - > ca_cert/ca_cert
          cat ca_cert/ca_cert
  - put: helm
    params:
      chart: scf-release-unzipped/helm/cf/
      release: cf
      namespace: cf
      values: scf-tutorial/scf/scf-config-values.yaml
      override_values:
      - key: secrets.UAA_CA_CERT
        path: ca_cert/ca_cert
      wait_until_ready: 900
      kubeconfig_path: kubeconfig/kube.config
