---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-set"
    labels:
      app.kubernetes.io/component: "uaa-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "uaa"
      port: 8080
      protocol: "TCP"
      targetPort: 0
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "uaa"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-uaa-set"
    labels:
      app.kubernetes.io/component: "uaa-uaa-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "uaa"
      port: 8080
      protocol: "TCP"
      targetPort: 0
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "uaa"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-uaa"
    labels:
      app.kubernetes.io/component: "uaa-uaa"
  spec:
    ports:
    - name: "uaa"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: 8443
    selector:
      app.kubernetes.io/component: "uaa"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-uaa-public"
    labels:
      app.kubernetes.io/component: "uaa-uaa-public"
  spec:
    externalIPs:
    - "192.168.77.77"
    ports:
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: 8443
    selector:
      app.kubernetes.io/component: "uaa"
kind: "List"
---
# The uaa instance group contains the following jobs:
#
# - global-uaa-properties: Dummy BOSH job used to host global parameters that
#   are required to configure SCF / fissile
#
# - wait-for-database: This is a pre-start job to delay starting the rest of the
#   role until a database connection is ready. Currently it only checks that a
#   response can be obtained from the server, and not that it responds
#   intelligently.
#
#
# - uaa: The UAA is the identity management service for Cloud Foundry. It's
#   primary role is as an OAuth2 provider, issuing tokens for client
#   applications to use when they act on behalf of Cloud Foundry users. It can
#   also authenticate users with their Cloud Foundry credentials, and can act as
#   an SSO service using those credentials (or others). It has endpoints for
#   managing user accounts and for registering OAuth2 clients, as well as
#   various other management functions.
apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "uaa"
  labels:
    app.kubernetes.io/component: "uaa"
spec:
  podManagementPolicy: "OrderedReady"
  replicas: 1
  selector:
    matchLabels:
      skiff-role-name: "uaa"
  serviceName: "uaa-set"
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/component: "uaa"
      name: "uaa"
    spec:
      containers:
      - env:
        - name: "AEK_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "aek-password"
              name: "secrets"
        - name: "DOMAIN"
          value: ""
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        - name: "INTERNAL_CA_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert-key"
              name: "secrets"
        - name: "JWT_SIGNING_CERT"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-cert"
              name: "secrets"
        - name: "JWT_SIGNING_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-cert-key"
              name: "secrets"
        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: ""
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "LOG_LEVEL"
          value: "info"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        - name: "SAML_SERVICEPROVIDER_CERT"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-cert"
              name: "secrets"
        - name: "SAML_SERVICEPROVIDER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-cert-key"
              name: "secrets"
        - name: "SCF_LOG_HOST"
          value: ""
        - name: "SCF_LOG_PORT"
          value: "514"
        - name: "SCF_LOG_PROTOCOL"
          value: "tcp"
        - name: "SMTP_AUTH"
          value: "false"
        - name: "SMTP_FROM_ADDRESS"
          value: ""
        - name: "SMTP_HOST"
          value: ""
        - name: "SMTP_PASSWORD"
          value: ""
        - name: "SMTP_PORT"
          value: "25"
        - name: "SMTP_STARTTLS"
          value: "false"
        - name: "SMTP_USER"
          value: ""
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets"
        - name: "UAA_ADMIN_CLIENT_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-admin-client-secret"
              name: "secrets"
        - name: "UAA_PUBLIC_PORT"
          value: "2793"
        - name: "UAA_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-cert"
              name: "secrets"
        - name: "UAA_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-cert-key"
              name: "secrets"
        - name: "VCAP_HARD_NPROC"
          value: "2048"
        - name: "VCAP_SOFT_NPROC"
          value: "1024"
        image: "registry.suse.com/cap/uaa-uaa:378dee28c60e7a7ac892d79ad8fa043d63c2c7cf"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "uaa"
        ports:
        - containerPort: 8080
          name: "uaa"
          protocol: "TCP"
        - containerPort: 8443
          name: "uaa-ssl"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "curl --resolve uaa.${DOMAIN}:8443:$(getent hosts ${HOSTNAME} | awk '{ print $1 }') --fail -H \"Host: uaa.${DOMAIN}\" -H 'Accept: application/json' https://uaa.${DOMAIN}:8443/info"
        resources:
          requests:
            memory: "2100Mi"
            cpu: "2000m"
          limits: {}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      volumes:
      - name: "deployment-manifest"
        secret:
          secretName: "deployment-manifest"
          items:
          - key: "deployment-manifest"
            path: "deployment-manifest.yml"
