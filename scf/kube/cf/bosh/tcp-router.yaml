---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "tcp-router-set"
    labels:
      app.kubernetes.io/component: "tcp-router-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "healthcheck"
      port: 2341
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-0"
      port: 20000
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-1"
      port: 20001
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-2"
      port: 20002
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-3"
      port: 20003
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-4"
      port: 20004
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-5"
      port: 20005
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-6"
      port: 20006
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-7"
      port: 20007
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-8"
      port: 20008
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "tcp-router"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "tcp-router-tcp-router-set"
    labels:
      app.kubernetes.io/component: "tcp-router-tcp-router-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "healthcheck"
      port: 2341
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-0"
      port: 20000
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-1"
      port: 20001
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-2"
      port: 20002
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-3"
      port: 20003
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-4"
      port: 20004
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-5"
      port: 20005
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-6"
      port: 20006
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-7"
      port: 20007
      protocol: "TCP"
      targetPort: 0
    - name: "tcp-route-8"
      port: 20008
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "tcp-router"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "tcp-router-tcp-router"
    labels:
      app.kubernetes.io/component: "tcp-router-tcp-router"
  spec:
    ports:
    - name: "healthcheck"
      port: 2341
      protocol: "TCP"
      targetPort: 8080
    - name: "tcp-route-0"
      port: 20000
      protocol: "TCP"
      targetPort: 20000
    - name: "tcp-route-1"
      port: 20001
      protocol: "TCP"
      targetPort: 20001
    - name: "tcp-route-2"
      port: 20002
      protocol: "TCP"
      targetPort: 20002
    - name: "tcp-route-3"
      port: 20003
      protocol: "TCP"
      targetPort: 20003
    - name: "tcp-route-4"
      port: 20004
      protocol: "TCP"
      targetPort: 20004
    - name: "tcp-route-5"
      port: 20005
      protocol: "TCP"
      targetPort: 20005
    - name: "tcp-route-6"
      port: 20006
      protocol: "TCP"
      targetPort: 20006
    - name: "tcp-route-7"
      port: 20007
      protocol: "TCP"
      targetPort: 20007
    - name: "tcp-route-8"
      port: 20008
      protocol: "TCP"
      targetPort: 20008
    selector:
      app.kubernetes.io/component: "tcp-router"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "tcp-router-tcp-router-public"
    labels:
      app.kubernetes.io/component: "tcp-router-tcp-router-public"
  spec:
    externalIPs:
    - "192.168.77.77"
    ports:
    - name: "tcp-route-0"
      port: 20000
      protocol: "TCP"
      targetPort: 20000
    - name: "tcp-route-1"
      port: 20001
      protocol: "TCP"
      targetPort: 20001
    - name: "tcp-route-2"
      port: 20002
      protocol: "TCP"
      targetPort: 20002
    - name: "tcp-route-3"
      port: 20003
      protocol: "TCP"
      targetPort: 20003
    - name: "tcp-route-4"
      port: 20004
      protocol: "TCP"
      targetPort: 20004
    - name: "tcp-route-5"
      port: 20005
      protocol: "TCP"
      targetPort: 20005
    - name: "tcp-route-6"
      port: 20006
      protocol: "TCP"
      targetPort: 20006
    - name: "tcp-route-7"
      port: 20007
      protocol: "TCP"
      targetPort: 20007
    - name: "tcp-route-8"
      port: 20008
      protocol: "TCP"
      targetPort: 20008
    selector:
      app.kubernetes.io/component: "tcp-router"
kind: "List"
---
# The tcp-router instance group contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# - wait-for-uaa: Wait for UAA to be ready before starting any jobs
#
# Also: tcp_router and bpm
apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "tcp-router"
  labels:
    app.kubernetes.io/component: "tcp-router"
spec:
  podManagementPolicy: "Parallel"
  replicas: 1
  selector:
    matchLabels:
      skiff-role-name: "tcp-router"
  serviceName: "tcp-router-set"
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/component: "tcp-router"
      name: "tcp-router"
    spec:
      containers:
      - env:
        - name: "AZ_LABEL_NAME"
          value: ""
        - name: "CATS_SUITES"
          value: ""
        - name: "GARDEN_ROOTFS_DRIVER"
          value: "btrfs"
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: ""
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "LOG_LEVEL"
          value: "info"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        - name: "PZ_LABEL_NAME"
          value: ""
        - name: "SCF_LOG_HOST"
          value: ""
        - name: "SCF_LOG_PORT"
          value: "514"
        - name: "SCF_LOG_PROTOCOL"
          value: "tcp"
        - name: "UAA_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-ca-cert"
              name: "secrets"
        - name: "UAA_CLIENTS_TCP_ROUTER_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-clients-tcp-router-secret"
              name: "secrets"
        - name: "UAA_HOST"
          value: ""
        - name: "UAA_PORT"
          value: "2793"
        - name: "VCAP_HARD_NPROC"
          value: "2048"
        - name: "VCAP_SOFT_NPROC"
          value: "1024"
        image: "registry.suse.com/cap/scf-tcp-router:2fbe30e653625d102a98a2c9b338f8785497d2c7"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "tcp-router"
        ports:
        - containerPort: 8080
          name: "healthcheck"
          protocol: "TCP"
        - containerPort: 20000
          name: "tcp-route-20000"
          protocol: "TCP"
        - containerPort: 20001
          name: "tcp-route-20001"
          protocol: "TCP"
        - containerPort: 20002
          name: "tcp-route-20002"
          protocol: "TCP"
        - containerPort: 20003
          name: "tcp-route-20003"
          protocol: "TCP"
        - containerPort: 20004
          name: "tcp-route-20004"
          protocol: "TCP"
        - containerPort: 20005
          name: "tcp-route-20005"
          protocol: "TCP"
        - containerPort: 20006
          name: "tcp-route-20006"
          protocol: "TCP"
        - containerPort: 20007
          name: "tcp-route-20007"
          protocol: "TCP"
        - containerPort: 20008
          name: "tcp-route-20008"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "curl --silent --fail --head http://${HOSTNAME}:8080/health"
        resources:
          requests:
            memory: "128Mi"
            cpu: "2000m"
          limits: {}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      - env:
        - name: "AZ_LABEL_NAME"
          value: ""
        - name: "CATS_SUITES"
          value: ""
        - name: "GARDEN_ROOTFS_DRIVER"
          value: "btrfs"
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: ""
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "LOGGREGATOR_AGENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "loggregator-agent-cert"
              name: "secrets"
        - name: "LOGGREGATOR_AGENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "loggregator-agent-cert-key"
              name: "secrets"
        - name: "LOGGREGATOR_FORWARD_CERT"
          valueFrom:
            secretKeyRef:
              key: "loggregator-forward-cert"
              name: "secrets"
        - name: "LOGGREGATOR_FORWARD_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "loggregator-forward-cert-key"
              name: "secrets"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        - name: "PZ_LABEL_NAME"
          value: ""
        - name: "SCF_LOG_HOST"
          value: ""
        - name: "SCF_LOG_PORT"
          value: "514"
        - name: "SCF_LOG_PROTOCOL"
          value: "tcp"
        - name: "VCAP_HARD_NPROC"
          value: "2048"
        - name: "VCAP_SOFT_NPROC"
          value: "1024"
        image: "registry.suse.com/cap/scf-loggregator-agent:39c7e06aaa613d8d7ae5ac05dc952c5d1cf1be17"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "loggregator-agent"
        ports: ~
        readinessProbe: ~
        resources:
          requests: {}
          limits: {}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      serviceAccountName: "default-privileged"
      terminationGracePeriodSeconds: 600
      volumes:
      - name: "deployment-manifest"
        secret:
          secretName: "deployment-manifest"
          items:
          - key: "deployment-manifest"
            path: "deployment-manifest.yml"
